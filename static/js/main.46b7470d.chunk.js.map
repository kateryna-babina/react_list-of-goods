{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","getReorderedGoods","goods","sortType","isReversed","visibleGoods","sort","good1","good2","ALPHABET","localeCompare","LENGTH","length","reverse","console","log","App","state","NONE","setState","sortBy","reset","this","reorderOptions","className","type","onClick","map","good","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAiBKA,E,wFAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAeK,SAASC,EACdC,EADK,GAGJ,IADCC,EACF,EADEA,SAAUC,EACZ,EADYA,WAGNC,EAAY,YAAOH,GAqBzB,OAlBAG,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQL,GACN,KAAKJ,EAASU,SACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKT,EAASY,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAITR,GACFC,EAAaQ,UAIfC,QAAQC,IAAIZ,EAAUC,GAEfC,G,SAtCJN,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA+CE,IAAMiB,EAAb,4MACEC,MAAe,CACbb,YAAY,EACZD,SAAUJ,EAASmB,MAHvB,EAMEL,QAAU,WACR,EAAKM,UAAS,SAAAF,GAAK,MAAK,CACtBb,YAAaa,EAAMb,gBARzB,EAYEgB,OAAS,SAACjB,GACR,EAAKgB,SAAS,CACZhB,cAdN,EAkBEkB,MAAQ,WACN,EAAKF,SAAS,CACZhB,SAAUJ,EAASmB,KACnBd,YAAY,KArBlB,4CAyBE,WAAU,IAAD,OACP,EAAiCkB,KAAKL,MAA9Bb,EAAR,EAAQA,WAAYD,EAApB,EAAoBA,SACdoB,EAAiC,CAAEnB,aAAYD,YAErD,OACE,sBAAKqB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACErB,IAAaJ,EAASU,SAClB,iBACA,0BAENiB,QAAS,WACP,EAAKN,OAAOrB,EAASU,WARzB,iCAcA,wBACEgB,KAAK,SACLD,UACErB,IAAaJ,EAASY,OAClB,oBACA,6BAENe,QAAS,WACP,EAAKN,OAAOrB,EAASY,SARzB,4BAcA,wBACEc,KAAK,SACLD,UACEpB,EACI,oBACA,6BAENsB,QAASJ,KAAKT,QAPhB,sBAYEV,IAAaJ,EAASmB,MAAQd,IAE9B,wBACEqB,KAAK,SACLD,UAAU,4BACVE,QAASJ,KAAKD,MAHhB,sBAWJ,6BACE,6BACGpB,EAAkBD,EAAiBuB,GAAgBI,KAAI,SAAAC,GAAI,OAC1D,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,iBAxFtC,GAAyBC,IAAMC,WC7D/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.46b7470d.chunk.js","sourcesContent":["import React from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  // Sort and reverse goods if needed\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return good1.localeCompare(good2);\n      case SortType.LENGTH:\n        return good1.length - good2.length;\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\n// DON'T save goods to the state\ntype State = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    isReversed: false,\n    sortType: SortType.NONE,\n  };\n\n  reverse = () => {\n    this.setState(state => ({\n      isReversed: !state.isReversed,\n    }));\n  };\n\n  sortBy = (sortType: SortType) => {\n    this.setState({\n      sortType,\n    });\n  };\n\n  reset = () => {\n    this.setState({\n      sortType: SortType.NONE,\n      isReversed: false,\n    });\n  };\n\n  render() {\n    const { isReversed, sortType } = this.state;\n    const reorderOptions: ReorderOptions = { isReversed, sortType };\n\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={\n              sortType === SortType.ALPHABET\n                ? 'button is-info'\n                : 'button is-info is-light'\n            }\n            onClick={() => {\n              this.sortBy(SortType.ALPHABET);\n            }}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={\n              sortType === SortType.LENGTH\n                ? 'button is-success'\n                : 'button is-success is-light'\n            }\n            onClick={() => {\n              this.sortBy(SortType.LENGTH);\n            }}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={\n              isReversed\n                ? 'button is-warning'\n                : 'button is-warning is-light'\n            }\n            onClick={this.reverse}\n          >\n            Reverse\n          </button>\n\n          {(sortType !== SortType.NONE || isReversed)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={this.reset}\n            >\n              Reset\n            </button>\n          )}\n\n        </div>\n\n        <ul>\n          <ul>\n            {getReorderedGoods(goodsFromServer, reorderOptions).map(good => (\n              <li data-cy=\"Good\" key={good}>\n                {good}\n              </li>\n            ))}\n          </ul>\n        </ul>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}